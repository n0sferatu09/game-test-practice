import type { AreaComp } from "../../components";
import type { GameObj } from "../../types";
/**
 * Left or right edge of an object's bbox
 */
declare class Edge {
    obj: GameObj<AreaComp>;
    x: number;
    isLeft: boolean;
    constructor(obj: GameObj<AreaComp>, isLeft: boolean);
}
/**
 * One dimensional sweep and prune
 */
export declare class SweepAndPrune {
    edges: Array<Edge>;
    objects: Map<GameObj<AreaComp>, [Edge, Edge]>;
    constructor();
    /**
     * Add the object and its edges to the list
     * @param obj The object to add
     */
    add(obj: GameObj<AreaComp>): void;
    /**
     * Remove the object and its edges from the list
     * @param obj The object to remove
     */
    remove(obj: GameObj<AreaComp>): void;
    clear(): void;
    /**
     * Update edges and sort
     */
    update(): void;
    /**
     * Iterates all object pairs which potentially collide
     */
    [Symbol.iterator](): Generator<GameObj<AreaComp>[], void, unknown>;
}
export {};
//# sourceMappingURL=sweepandprune.d.ts.map